# Mettre tous les éléments de la liste dans l'environnement global
rm(list=ls())
EP_FI_AG <-creer_table_minimale(20)
# Mettre tous les éléments de la liste dans l'environnement global
rm(list=ls())
devtools::load_all()
EP_FI_AG <-creer_table_minimale(20)
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_valides
table_demandes
erreurs <- controler_demandes(table_demandes)
erreurs
if(nrow(erreurs)!=0) erreurs; stop("il ya des erreurs dans les demandes")
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_erreurs
erreurs <- controler_demandes(table_demandes)
if(nrow(erreurs)!=0) erreurs; stop("il ya des erreurs dans les demandes")
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_valides
erreurs <- controler_demandes(table_demandes)
if(nrow(erreurs)!=0) erreurs; stop("il ya des erreurs dans les demandes")
setDT(EP_FI_AG)
for (i in 1:nrow(table_demandes)){
print(i)
gerer_une_demande(table_demandes[i,]%>% unlist())
}
out <- apply(table_demandes,1,gerer_une_demande)
generer_markdown_auto(table_demandes,out)
generer_markdown_auto(table_demandes,out)
rmarkdown::render(
input = "output/rapport_automatique.Rmd",
envir = globalenv(),
)
Sys.setenv(no_proxy = "")
Sys.setenv(https_proxy ="http://proxy-rie.http.insee.fr:8080")
Sys.setenv(http_proxy ="http://proxy-rie.http.insee.fr:8080")
library(pbapply)
out_ollama <- pbapply(table_demandes,1,gerer_une_demande,for_ollama = TRUE)
out_ollama
devtools::install_github("clement2323/ollamax")
library(ollamax); #??ollamax
metadata <- jsonlite::fromJSON("input/metadonnees.json")  # Ajout de la lecture du JSON
rm(list=ls())
# Then install the package from GitHub
devtools::install_github("clement2323/ollamax")
library(ollamax); #??ollamax
library(jsonlite)
library(pbapply)
EP_FI_AG <-creer_table_minimale(20)
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_valides
#table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_erreurs
erreurs <- controler_demandes(table_demandes)
if(nrow(erreurs)!=0){erreurs; stop("il ya des erreurs dans les demandes")}
setDT(EP_FI_AG)
metadata <- jsonlite::fromJSON("input/metadonnees.json", simplifyDataFrame = FALSE)  # Ajout de la lecture du JSON
out <- pbapply(table_demandes,1,gerer_une_demande)
out_ollama <- pbapply(table_demandes,1,gerer_une_demande,for_ollama = TRUE)
#cat(preparer_prompt(out[[1]],"EP_FI_AG",metadata))
generer_markdown_auto(
table_demandes,
out,
out_ollama = out_ollama,
fonction_ask_ollama = ask_ollama, metadata = meta_data,
prompt_header=NULL,prompt_instruction = NULL,model_name = "mistral-small"
)
metadata
generer_markdown_auto(
table_demandes,
out,
out_ollama = out_ollama,
fonction_ask_ollama = ask_ollama, metadata = metadata,
prompt_header=NULL,prompt_instruction = NULL,model_name = "mistral-small"
)
rmarkdown::render(
input = "output/rapport_automatique.Rmd",
envir = globalenv(),
)
#### Lancement OLLAMA
rm(list=ls())
ollamax
ollamax
devtools::load_all()
# Then install the package from GitHub
devtools::install_github("clement2323/ollamax")
Sys.setenv(no_proxy = "")
Sys.setenv(https_proxy ="http://proxy-rie.http.insee.fr:8080")
Sys.setenv(http_proxy ="http://proxy-rie.http.insee.fr:8080")
rm(list=ls())
devtools::load_all()
# Then install the package from GitHub
devtools::install_github("clement2323/ollamax")
library(ollamax); #??ollamax
library(jsonlite)
library(pbapply)
EP_FI_AG <-creer_table_minimale(20)
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_valides
#table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_erreurs
erreurs <- controler_demandes(table_demandes)
if(nrow(erreurs)!=0){erreurs; stop("il ya des erreurs dans les demandes")}
setDT(EP_FI_AG)
metadata <- jsonlite::fromJSON("input/metadonnees.json", simplifyDataFrame = FALSE)  # Ajout de la lecture du JSON
table_demandes
metadata
out <- pbapply(table_demandes,1,gerer_une_demande,metadata = metadata)
out_ollama <- pbapply(table_demandes,1,gerer_une_demande,metadata = metadata,for_ollama = TRUE)
generer_markdown_auto(
table_demandes,
out,
out_ollama = out_ollama,
fonction_ask_ollama = ask_ollama, metadata = metadata,
prompt_header=NULL,prompt_instruction = NULL,model_name = "mistral-small"
)
rmarkdown::render(
input = "output/rapport_automatique.Rmd",
envir = globalenv(),
)
Sys.setenv(no_proxy = "")
Sys.setenv(https_proxy ="http://proxy-rie.http.insee.fr:8080")
Sys.setenv(http_proxy ="http://proxy-rie.http.insee.fr:8080")
library(pbapply)
# Mettre tous les éléments de la liste dans l'environnement global
rm(list=ls())
#### Lancement OLLAMA
rm(list=ls())
devtools::load_all()
# Then install the package from GitHub
devtools::install_github("clement2323/ollamax")
library(ollamax); #??ollamax
library(jsonlite)
library(pbapply)
EP_FI_AG <-creer_table_minimale(20)
EP_FI_AG
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_valides
table_demandes
#table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_erreurs
erreurs <- controler_demandes(table_demandes)
erreurs
if(nrow(erreurs)!=0){erreurs; stop("il ya des erreurs dans les demandes")}
setDT(EP_FI_AG)
metadata <- jsonlite::fromJSON("input/metadonnees.json", simplifyDataFrame = FALSE)  # Ajout de la lecture du JSON
metadata
out <- pbapply(table_demandes,1,gerer_une_demande,metadata = metadata)
out
out_ollama <- pbapply(table_demandes,1,gerer_une_demande,metadata = metadata,for_ollama = TRUE)
out_ollama
cat(preparer_prompt(out[[1]],"EP_FI_AG",metadata))
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
Sys.setenv(no_proxy = "")
Sys.setenv(https_proxy ="http://proxy-rie.http.insee.fr:8080")
Sys.setenv(http_proxy ="http://proxy-rie.http.insee.fr:8080")
devtools::check()
# Installation si nécessaire
install.packages("pkgdown")
# Initialisation de pkgdown dans votre package
usethis::use_pkgdown()
build_tutorials(override = list(), preview = FALSE)
pkgdown::build_tutorials(override = list(), preview = FALSE)
getwd()
pkgdown::build_tutorials(preview = FALSE)
Sys.setenv(no_proxy = "")
Sys.setenv(https_proxy ="http://proxy-rie.http.insee.fr:8080")
Sys.setenv(http_proxy ="http://proxy-rie.http.insee.fr:8080")
pkgdown::build_tutorials(preview = FALSE)
usethis::use_tutorial("mon-premier-tutoriel", "Mon Premier Tutoriel")
pkgdown::build_tutorials(preview = FALSE)
usethis::use_tutorial("titou_tuto", "Tutoriel de Titou")
library(BoutadE)
library(pbapply)
# Créer un dossier temporaire pour les exemples
temp_dir <- tempdir()
dir_etudes <- file.path(temp_dir, "etudes_jouet")
# Copier toutes les études exemples
etudes_source <- system.file("extdata", "etudes_jouet", package = "BoutadE")
file.copy(etudes_source, temp_dir, recursive = TRUE)
etudes <- list.dirs(dir_etudes, full.names = TRUE, recursive = FALSE)
etude <- etudes[1]
resultat <- ecrire_etude(dir_etude = etude, use_ia = FALSE)
library(BoutadE)
library(pbapply)
# Créer un dossier temporaire pour les exemples
temp_dir <- tempdir()
dir_etudes <- file.path(temp_dir, "etudes_jouet")
# Copier toutes les études exemples
etudes_source <- system.file("extdata", "etudes_jouet", package = "BoutadE")
file.copy(etudes_source, temp_dir, recursive = TRUE)
etudes_source
# Copier toutes les études exemples
etudes_source <- system.file("extdata", "etudes_jouet", package = "BoutadE")
library(BoutadE)
data("table_demandes_valides")
table_demandes_valides
write.csv(table_demandes_valides,"table_demande_exemple.csv",row.names=FALSE)
data("table_demandes_rmd")
table_demandes_rmd
write.csv(table_demandes_rmd,"table_demande_exemple.csv",row.names=FALSE)
library(BoutadE)
library(dplyr)
devtools::install_github("clement2323/ollamax")
Sys.setenv(no_proxy = "")
Sys.setenv(https_proxy ="http://proxy-rie.http.insee.fr:8080")
Sys.setenv(http_proxy ="http://proxy-rie.http.insee.fr:8080")
data("metadonnees_etude") #  metadonnee d'une etude
str(metadonnees_etude)
data("metadonnees_tables") #  metadonnee d'une etude
metadonnees_tables %>% head(10)
data("EP_FI_AG")
EP_FI_AG %>% head(5)
setDT(EP_FI_AG)
library(data.table)
data("EP_FI_AG")
EP_FI_AG %>% head(5)
setDT(EP_FI_AG)
data("table_demandes_valides")
data("table_demandes_erreurs")
metadonnees_tables
erreurs <- controler_demandes(table_demandes)
table_demandes <- table_demandes_valides
erreurs <- controler_demandes(table_demandes)
erreurs
if(nrow(erreurs)!=0) erreurs; stop("il ya des erreurs dans les demandes")
erreurs
erreurs <- controler_demandes(table_demandes)
if(nrow(erreurs)!=0) erreurs; stop("il ya des erreurs dans les demandes")
nrow(erreurs)
nrow(erreurs)!=0
if(nrow(erreurs)!=0) erreurs; stop("il ya des erreurs dans les demandes")
if(nrow(erreurs)!=0) stop("il ya des erreurs dans les demandes")
1:nrow(table_demandes)
metadonnees_tables
metadonnees_tables <- NULL
# metadonnees_tables <- NULL
# gestion excel ok <-
for (i in 1:nrow(table_demandes)){
print(i)
ecrire_demande_sur_xls(table_demandes[i,],metadonnees_tables)
}
ecrire_etude
1:nrow(table_demandes_rmd
metadonnees_tables
liste_info_chunk <- pblapply(1:nrow(table_demandes_rmd), function(i){ generer_figure_from_demande(table_demandes_rmd[i,], metadonnees_tables)
}
)
library(pbapply)
liste_info_chunk <- pblapply(1:nrow(table_demandes_rmd), function(i){ generer_figure_from_demande(table_demandes_rmd[i,], metadonnees_tables)
}
)
data("metadonnees_tables")
metadonnees_tables
liste_info_chunk <- pblapply(1:nrow(table_demandes_rmd), function(i){ generer_figure_from_demande(table_demandes_rmd[i,], metadonnees_tables)
}
)
liste_info_chunk[[1]]
# etude d'un element
element <- liste_info_chunk[[1]]
str(element)
str(element,1)
figure <- element$figure
FIGURE
figure
element <- liste_info_chunk[[3]]
figure <- element$figure
figure
# etude d'un element
element <- liste_info_chunk[[4]]
figure
# etude d'un element
element <- liste_info_chunk[[13]]
figure <- element$figure
figure
nom_rapport <- "rapport_titou.rmd"
generer_markdown_auto_simple(liste_info_chunk, nom_rapport = nom_rapport)
table_demandes_rmd
element <- liste_info_chunk[[2]]
figure <- element$figure
figure
rmarkdown::render(input = paste0("output/", nom_rapport),envir = environment())
metadonnees_tables
metadonnees_tables
table_demandes_valides
metadonnees_etude
data("metadonnees_etude") #  metadonnee d'une etude
str(metadonnees_etude)  # Que pour parler ollama (YODA)
data("metadonnees_tables") #  metadonnee d'une etude
metadonnees_tables %>% head(10) # tu en as besoin
data("EP_FI_AG")
EP_FI_AG %>% head(5)
setDT(EP_FI_AG)
EP_FI_AG
data("table_demandes_valides")
table_demandes_valides
library(BoutadE)
library(dplyr)
#devtools::install_github("clement2323/ollamax")
#{library(ollamax) #??ollamax
library(pbapply)
library(data.table)
#Sys.setenv(no_proxy = "")
#Sys.setenv(https_proxy ="http://proxy-rie.http.insee.fr:8080")
#Sys.setenv(http_proxy ="http://proxy-rie.http.insee.fr:8080")
# voir toutes les tables jouets disponibles
data(package = "BoutadE")
data("metadonnees_etude") #  metadonnee d'une etude
str(metadonnees_etude)  # Que pour parler ollama (YODA)
data("metadonnees_tables") #  metadonnee d'une etude
metadonnees_tables %>% head(10) # tu en as besoin
data("EP_FI_AG")
EP_FI_AG %>% head(5)
setDT(EP_FI_AG)
data("table_demandes_valides")
data("table_demandes_erreurs")
metadonnees_tables
table_demandes <- table_demandes_valides
erreurs <- controler_demandes(table_demandes)
if(nrow(erreurs)!=0) stop("il ya des erreurs dans les demandes")
liste_info_chunk <- pblapply(1:nrow(table_demandes_rmd), function(i){ generer_figure_from_demande(table_demandes_rmd[i,],metadonnees_tables)
}
)
liste_info_chunk
# etude d'un element
element <- liste_info_chunk[[2]]
nom_rapport <- "rapport_titou.rmd"
# genere le .rmd rapport titou
generer_markdown_auto_simple(liste_info_chunk, nom_rapport = nom_rapport)

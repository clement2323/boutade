# Mettre tous les éléments de la liste dans l'environnement global
rm(list=ls())
EP_FI_AG <-creer_table_minimale(20)
# Mettre tous les éléments de la liste dans l'environnement global
rm(list=ls())
devtools::load_all()
EP_FI_AG <-creer_table_minimale(20)
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_valides
table_demandes
erreurs <- controler_demandes(table_demandes)
erreurs
if(nrow(erreurs)!=0) erreurs; stop("il ya des erreurs dans les demandes")
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_erreurs
erreurs <- controler_demandes(table_demandes)
if(nrow(erreurs)!=0) erreurs; stop("il ya des erreurs dans les demandes")
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_valides
erreurs <- controler_demandes(table_demandes)
if(nrow(erreurs)!=0) erreurs; stop("il ya des erreurs dans les demandes")
setDT(EP_FI_AG)
for (i in 1:nrow(table_demandes)){
print(i)
gerer_une_demande(table_demandes[i,]%>% unlist())
}
out <- apply(table_demandes,1,gerer_une_demande)
generer_markdown_auto(table_demandes,out)
generer_markdown_auto(table_demandes,out)
rmarkdown::render(
input = "output/rapport_automatique.Rmd",
envir = globalenv(),
)
Sys.setenv(no_proxy = "")
Sys.setenv(https_proxy ="http://proxy-rie.http.insee.fr:8080")
Sys.setenv(http_proxy ="http://proxy-rie.http.insee.fr:8080")
library(pbapply)
out_ollama <- pbapply(table_demandes,1,gerer_une_demande,for_ollama = TRUE)
out_ollama
devtools::install_github("clement2323/ollamax")
library(ollamax); #??ollamax
metadata <- jsonlite::fromJSON("input/metadonnees.json")  # Ajout de la lecture du JSON
rm(list=ls())
# Then install the package from GitHub
devtools::install_github("clement2323/ollamax")
library(ollamax); #??ollamax
library(jsonlite)
library(pbapply)
EP_FI_AG <-creer_table_minimale(20)
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_valides
#table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_erreurs
erreurs <- controler_demandes(table_demandes)
if(nrow(erreurs)!=0){erreurs; stop("il ya des erreurs dans les demandes")}
setDT(EP_FI_AG)
metadata <- jsonlite::fromJSON("input/metadonnees.json", simplifyDataFrame = FALSE)  # Ajout de la lecture du JSON
out <- pbapply(table_demandes,1,gerer_une_demande)
out_ollama <- pbapply(table_demandes,1,gerer_une_demande,for_ollama = TRUE)
#cat(preparer_prompt(out[[1]],"EP_FI_AG",metadata))
generer_markdown_auto(
table_demandes,
out,
out_ollama = out_ollama,
fonction_ask_ollama = ask_ollama, metadata = meta_data,
prompt_header=NULL,prompt_instruction = NULL,model_name = "mistral-small"
)
metadata
generer_markdown_auto(
table_demandes,
out,
out_ollama = out_ollama,
fonction_ask_ollama = ask_ollama, metadata = metadata,
prompt_header=NULL,prompt_instruction = NULL,model_name = "mistral-small"
)
rmarkdown::render(
input = "output/rapport_automatique.Rmd",
envir = globalenv(),
)
#### Lancement OLLAMA
rm(list=ls())
ollamax
ollamax
devtools::load_all()
# Then install the package from GitHub
devtools::install_github("clement2323/ollamax")
Sys.setenv(no_proxy = "")
Sys.setenv(https_proxy ="http://proxy-rie.http.insee.fr:8080")
Sys.setenv(http_proxy ="http://proxy-rie.http.insee.fr:8080")
rm(list=ls())
devtools::load_all()
# Then install the package from GitHub
devtools::install_github("clement2323/ollamax")
library(ollamax); #??ollamax
library(jsonlite)
library(pbapply)
EP_FI_AG <-creer_table_minimale(20)
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_valides
#table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_erreurs
erreurs <- controler_demandes(table_demandes)
if(nrow(erreurs)!=0){erreurs; stop("il ya des erreurs dans les demandes")}
setDT(EP_FI_AG)
metadata <- jsonlite::fromJSON("input/metadonnees.json", simplifyDataFrame = FALSE)  # Ajout de la lecture du JSON
table_demandes
metadata
out <- pbapply(table_demandes,1,gerer_une_demande,metadata = metadata)
out_ollama <- pbapply(table_demandes,1,gerer_une_demande,metadata = metadata,for_ollama = TRUE)
generer_markdown_auto(
table_demandes,
out,
out_ollama = out_ollama,
fonction_ask_ollama = ask_ollama, metadata = metadata,
prompt_header=NULL,prompt_instruction = NULL,model_name = "mistral-small"
)
rmarkdown::render(
input = "output/rapport_automatique.Rmd",
envir = globalenv(),
)
Sys.setenv(no_proxy = "")
Sys.setenv(https_proxy ="http://proxy-rie.http.insee.fr:8080")
Sys.setenv(http_proxy ="http://proxy-rie.http.insee.fr:8080")
library(pbapply)
# Mettre tous les éléments de la liste dans l'environnement global
rm(list=ls())
#### Lancement OLLAMA
rm(list=ls())
devtools::load_all()
# Then install the package from GitHub
devtools::install_github("clement2323/ollamax")
library(ollamax); #??ollamax
library(jsonlite)
library(pbapply)
EP_FI_AG <-creer_table_minimale(20)
EP_FI_AG
table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_valides
table_demandes
#table_demandes <-(creer_tables_demandes(EP_FI_AG))$table_demandes_erreurs
erreurs <- controler_demandes(table_demandes)
erreurs
if(nrow(erreurs)!=0){erreurs; stop("il ya des erreurs dans les demandes")}
setDT(EP_FI_AG)
metadata <- jsonlite::fromJSON("input/metadonnees.json", simplifyDataFrame = FALSE)  # Ajout de la lecture du JSON
metadata
out <- pbapply(table_demandes,1,gerer_une_demande,metadata = metadata)
out
out_ollama <- pbapply(table_demandes,1,gerer_une_demande,metadata = metadata,for_ollama = TRUE)
out_ollama
cat(preparer_prompt(out[[1]],"EP_FI_AG",metadata))
